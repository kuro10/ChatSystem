/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package main.system.ui;

import java.awt.event.KeyEvent;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.WindowConstants;
import javax.swing.text.BadLocationException;
import main.system.connection.service.UDPSenderService;
import main.system.model.Node;
import main.system.model.Peer;

/**
 *
 * @author Kuro10
 */
public class ChangeName extends javax.swing.JFrame {

    /**
     * Creates attributs
     */
    private Home home;
    private Node node;
    private Boolean confirm = false;

    /**
     * Creates new form ChangeName
     *
     * @param node
     */
    public ChangeName(Node node, Home home) {
        initComponents();
        this.node = node;
        this.home = home;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        titreLabel = new javax.swing.JLabel();
        nicknameField = new javax.swing.JTextField();
        cancelButton = new javax.swing.JButton();
        confirmButton = new javax.swing.JButton();
        warningLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Rename - ChatSystem");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        titreLabel.setText(" Enter your new nickname : ");

        nicknameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nicknameFieldKeyPressed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        warningLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(35, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                        .addComponent(confirmButton))
                    .addComponent(nicknameField)
                    .addComponent(titreLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(warningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(titreLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nicknameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(confirmButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(warningLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed

        /* Close the rename window */
        this.setVisible(false);
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed

        /* First, check the new name */
        String newName = nicknameField.getText();
        String oldName = this.node.getPeer().getPseudonyme();
        if (this.checkNameUniq(newName) && !newName.equals("") && !newName.equals(oldName)) {

            try {
                this.node.getPeer().setPseudonyme(newName);
                this.home.setNicknameLabel("Your nickname : " + newName);
                this.home.writeNoti(oldName + " has changed name to " + newName + System.lineSeparator());
                this.confirm = true;
                /* Ok, then sends a broadcast to inform */
                try {
                    new UDPSenderService().sendRename(node);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(ChangeName.class.getName()).log(Level.SEVERE, null, ex);
                }
                //TODO Inform other users ?
                
                /* Done and close */
                this.setVisible(false);
                setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
                this.dispose();
            } catch (BadLocationException ex) {
                Logger.getLogger(ChangeName.class.getName()).log(Level.SEVERE, null, ex);
            }
            //TODO Inform other users ?
        } else {
            this.titreLabel.setText("This name has been used !");
        }
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        /* Close the rename window */
        this.setVisible(false);
        this.dispose();
    }//GEN-LAST:event_formWindowClosing

    private void nicknameFieldKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nicknameFieldKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            String newName = nicknameField.getText();
            String oldName = this.node.getPeer().getPseudonyme();
            if (this.checkNameUniq(newName) && !newName.equals("") && !newName.equals(oldName)) {

                try {
                    this.node.getPeer().setPseudonyme(newName);
                    this.home.setNicknameLabel("Your nickname : " + newName);
                    this.home.writeNoti(oldName + " has changed name to " + newName + System.lineSeparator());
                    this.confirm = true;
                    /* Ok, then sends a broadcast to inform */
                    try {
                        new UDPSenderService().sendRename(node);
                    } catch (UnknownHostException ex) {
                        Logger.getLogger(ChangeName.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    //TODO Inform other users ?
                    
                    /* Done and close */
                    this.setVisible(false);
                    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
                    this.dispose();
                } catch (BadLocationException ex) {
                    Logger.getLogger(ChangeName.class.getName()).log(Level.SEVERE, null, ex);
                }
                //TODO Inform other users ?
            } else {
                warningLabel.setText("This name has been used !");
            }
        }
    }//GEN-LAST:event_nicknameFieldKeyPressed

    /**
     * Creates new methods
     */
    public String getNewNickname() {
        if (this.confirm) {
            return nicknameField.getText();
        } else {
            return node.getPeer().getPseudonyme();
        }
    }

    public Boolean checkNameUniq(String name) {
        Boolean res = true;
        for (Peer p : this.home.getNode().getOnlinePeers()) {
            System.out.println(p.getPseudonyme());
            if (p.getPseudonyme().equals(name)) {
                res = false;
            }
        }
        return res;
    }

    public void display() {
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton confirmButton;
    private javax.swing.JTextField nicknameField;
    private javax.swing.JLabel titreLabel;
    private javax.swing.JLabel warningLabel;
    // End of variables declaration//GEN-END:variables
}
